apiVersion: v1
kind: Namespace
metadata:
  name: datalab

# ---- ---- ---- ---- Postgres for Hive Metastore ---- ---- ---- ----
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: datalab
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
        - name: postgres
          image: postgres:10-alpine
          ports:
            - containerPort: 5432
          env:
            
              
            
              
            - name: POSTGRES_USER
              value: "<Sample-Value>"
            - name: POSTGRES_PASSWORD
              value: "<Sample-Value>"
            - name: POSTGRES_DB
              value: "<POSTGRES-DB>"
          volumeMounts:
            - name: postgres-storage
              mountPath: /var/lib/postgresql/data
          livenessProbe:
            exec:
              command: ["pg_isready", "-U", "admin", "-d", "metastore_db"]
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 5
          readinessProbe:
            exec:
              command: ["pg_isready", "-U", "admin", "-d", "metastore_db"]
            initialDelaySeconds: 5
            periodSeconds: 10
      volumes:
        - name: postgres-storage
          hostPath:
            path: <YourPath>


# Service for Postgres
---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: datalab
spec:
  type: ClusterIP
  selector:
    app: postgres
  ports:
    - name: postgres
      protocol: TCP
      port: 5432
      targetPort: 5432


# ---- ---- ---- ---- MinIO ---- ---- ---- ----
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: minio
  namespace: datalab
spec:
  replicas: 1
  selector:
    matchLabels:
      app: minio
  template:
    metadata:
      labels:
        app: minio
    spec:
      containers:
        - name: minio
          image: minio/minio:RELEASE.2024-01-13T07-53-03Z
          ports:
            - containerPort: 9000
            - containerPort: 9001
          volumeMounts:
            - name: minio-storage
              mountPath: /data
          env:
            - name: MINIO_ROOT_USER
              value: <>
            - name: MINIO_ROOT_PASSWORD
              value: <>
            
              
            
              
          command: ["minio", "server", "/data", "--console-address", ":9001"]
      volumes:
        - name: minio-storage
          hostPath:
            value: <path>

---
apiVersion: v1
kind: Service
metadata:
  name: minio
  namespace: datalab
spec:
  selector:
    app: minio
  ports:
    - name: api
      protocol: TCP
      port: 9000
      targetPort: 9000
    - name: console
      protocol: TCP
      port: 9001
      targetPort: 9001
      

# ---- ---- ---- ---- Hive Server ---- ---- ---- ----
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: hive-config
  namespace: datalab
data:
  SERVICE_NAME: "hiveserver2"
  IS_RESUME: "true"
  HIVE_CUSTOM_CONF_DIR: "/opt/hive/conf"
  
  
  
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hive-server
  namespace: datalab
spec:
  replicas: 1
  selector:
    matchLabels:
      app: hive-server
  template:
    metadata:
      labels:
        app: hive-server
    spec:
      initContainers:
        - name: wait-for-postgres
          image: busybox
          command: ['sh', '-c', 'until nc -z postgres 5432; do echo waiting for postgres; sleep 2; done;']
      containers:
        - name: hive-server
          image: apache/hive:3.1.3
          ports:
            - containerPort: 10000
            - containerPort: 10002
          envFrom:
            - configMapRef:
                name: hive-config
          volumeMounts:
            - name: hive-config-volume
              mountPath: /opt/hive/conf
            - name: hadoop-libs
              mountPath: /opt/hive/lib/hadoop-aws-3.1.0.jar
              subPath: hadoop-aws-3.1.0.jar
            - name: hadoop-libs
              mountPath: /opt/hive/lib/aws-java-sdk-bundle-1.11.271.jar
              subPath: aws-java-sdk-bundle-1.11.271.jar
      volumes:
        - name: hive-config-volume
          hostPath:
            path: <>
        - name: hadoop-libs
          hostPath:
            path: <>
            type: DirectoryOrCreate


---
apiVersion: v1
kind: Service
metadata:
  name: hive-server
  namespace: datalab
spec:
  selector:
    app: hive-server
  ports:
    - name: thrift
      protocol: TCP
      port: 10000
      targetPort: 10000
    - name: http
      protocol: TCP
      port: 10002
      targetPort: 10002

# ---- ---- ---- ---- Hive Metastore ---- ---- ---- ---- 
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: hive-metastore-config
  namespace: datalab
data:
  SERVICE_NAME: "metastore"
  DB_DRIVER: "postgres"
  HIVE_CUSTOM_CONF_DIR: "/opt/hive/conf"
  
  


---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hive-metastore
  namespace: datalab
spec:
  replicas: 1
  selector:
    matchLabels:
      app: hive-metastore
  template:
    metadata:
      labels:
        app: hive-metastore
    spec:
      initContainers:
        - name: wait-for-postgres
          image: busybox
          command: ['sh', '-c', 'until nc -z postgres 5432; do echo waiting for postgres; sleep 2; done;']
      containers:
        - name: hive-metastore
          image: hive-metastore:latest  # You need to build & push this image
# Workaround : docker save my/local-image:v1.2.3 | sudo k3s ctr images import -
          imagePullPolicy: Never
          ports:
            - containerPort: 9083
          envFrom:
            - configMapRef:
                name: hive-metastore-config
          volumeMounts:
            - name: hive-config-volume
              mountPath: /opt/hive/conf
            - name: hadoop-libs
              mountPath: /opt/hive/lib/hadoop-aws-3.1.0.jar
              subPath: hadoop-aws-3.1.0.jar
            - name: hadoop-libs
              mountPath: /opt/hive/lib/aws-java-sdk-bundle-1.11.271.jar
              subPath: aws-java-sdk-bundle-1.11.271.jar
      volumes:
        - name: hive-config-volume
          hostPath:
            path: <>
        - name: hadoop-libs
          hostPath:
            path: <>
            type: DirectoryOrCreate

---
apiVersion: v1
kind: Service
metadata:
  name: hive-metastore
  namespace: datalab
spec:
  selector:
    app: hive-metastore
  ports:
    - name: thrift
      protocol: TCP
      port: 9083
      targetPort: 9083

# ---- ---- ---- ---- Spark Master ---- ---- ---- ----
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: masterspark
  namespace: datalab
spec:
  replicas: 1
  selector:
    matchLabels:
      app: masterspark
  template:
    metadata:
      labels:
        app: masterspark
    spec:
      containers:
        - name: masterspark
          image: updatedbitnamispark:latest #bitnami/spark:3.4.1
# docker buildx build -t updatedbitnamispark -f Dockerfile-spark .
# Workaround : docker save updatedbitnamispark:latest | sudo k3s ctr images import -
          imagePullPolicy: Never
          command:
            - "bin/spark-class"
            - "org.apache.spark.deploy.master.Master"
          ports:
            - containerPort: 8080
            - containerPort: 7077
          env:
            
              
            
              
          volumeMounts:
            - name: spark-apps-volume
              mountPath: /opt/spark-apps
            - name: spark-config-volume
              mountPath: /opt/bitnami/spark/conf
      volumes:
        - name: spark-apps-volume
          hostPath:
            path: <>
        - name: spark-config-volume
          hostPath:
            path: <>

---
apiVersion: v1
kind: Service
metadata:
  name: masterspark
  namespace: datalab
spec:
  selector:
    app: masterspark
  ports:
    - name: ui
      protocol: TCP
      port: 8080
      targetPort: 8080
    - name: master
      protocol: TCP
      port: 7077
      targetPort: 7077

# ---- ---- ---- ---- Spark Workers 1 & 2 ---- ---- ---- ----

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: spark-labour-1
  namespace: datalab
spec:
  replicas: 1
  selector:
    matchLabels:
      app: spark-labour-1
  template:
    metadata:
      labels:
        app: spark-labour-1
    spec:
      initContainers:
        - name: wait-for-postgres
          image: busybox
          command: ['sh', '-c', 'until nc -z masterspark 7077; do echo waiting for postgres; sleep 2; done;']
      containers:
        - name: spark-labour-1
          image: updatedbitnamispark:latest #bitnami/spark:3.4.1
          imagePullPolicy: Never
          command:
            - "bin/spark-class"
            - "org.apache.spark.deploy.worker.Worker"
            - "spark://masterspark:7077"
          env:
            - name: SPARK_MODE
              value: "worker"
            - name: SPARK_WORKER_CORES
              value: "2"
            - name: SPARK_WORKER_MEMORY
              value: "5g"
            - name: SPARK_MASTER_URL
              value: "spark://masterspark:7077"
          ports:
            - containerPort: 8081

---
apiVersion: v1
kind: Service
metadata:
  name: spark-labour-1
  namespace: datalab
spec:
  type: ClusterIP
  selector:
    app: spark-labour-1
  ports:
    - name: worker
      protocol: TCP
      port: 8081
      targetPort: 8081

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: spark-labour-2
  namespace: datalab
spec:
  replicas: 1
  selector:
    matchLabels:
      app: spark-labour-2
  template:
    metadata:
      labels:
        app: spark-labour-2
    spec:
      initContainers:
        - name: wait-for-postgres
          image: busybox
          command: ['sh', '-c', 'until nc -z masterspark 7077; do echo waiting for postgres; sleep 2; done;']
      containers:
        - name: spark-labour-2
          image: updatedbitnamispark:latest #bitnami/spark:3.4.1
          imagePullPolicy: Never
          command:
            - "bin/spark-class"
            - "org.apache.spark.deploy.worker.Worker"
            - "spark://masterspark:7077"
          env:
            - name: SPARK_MODE
              value: "worker"
            - name: SPARK_WORKER_CORES
              value: "2"
            - name: SPARK_WORKER_MEMORY
              value: "5g"
            - name: SPARK_MASTER_URL
              value: "spark://masterspark:7077"
          ports:
            - containerPort: 8081

---
apiVersion: v1
kind: Service
metadata:
  name: spark-labour-2
  namespace: datalab
spec:
  type: ClusterIP
  selector:
    app: spark-labour-2
  ports:
    - name: worker
      protocol: TCP
      port: 8081
      targetPort: 8081

# ---- ---- ---- ---- Jupyter Notebook ---- ---- ---- ----

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: notebookjupyter
  namespace: datalab
spec:
  replicas: 1
  selector:
    matchLabels:
      app: notebookjupyter
  template:
    metadata:
      labels:
        app: notebookjupyter
    spec:
      containers:
        - name: notebookjupyter
          image: myjupyterimage:latest
          imagePullPolicy: Never
# docker buildx build -t myjupyterimage -f Dockerfile-jupyter .
# Workaround : docker save myjupyterimage:latest | sudo k3s ctr images import -
          ports:
            - containerPort: 8888
          env:
            - name: AWS_ACCESS_KEY_ID
              value: <>
            - name: AWS_SECRET_ACCESS_KEY
              value: <>
            - name: JUPYTER_TOKEN
              value: <>  # Set your access token
            
              
            
              
          volumeMounts:
            - name: spark-config
              mountPath: /usr/local/spark/conf/spark-defaults.conf
              subPath: spark-defaults.conf
            - name: spark-config
              mountPath: /usr/local/spark/conf/spark-env.sh
              subPath: spark-env.sh
            - name: notebooks-workspace
              mountPath: /home/jovyan/Workspace
      volumes:
        - name: spark-config
          hostPath:
            path: <>
            type: DirectoryOrCreate
        - name: notebooks-workspace
          hostPath:
            path: <>

---
apiVersion: v1
kind: Service
metadata:
  name: notebookjupyter
  namespace: datalab
spec:
  selector:
    app: notebookjupyter
  type: NodePort
  ports:
    - protocol: TCP
      port: 8888
      targetPort: 8888
      nodePort: 30088